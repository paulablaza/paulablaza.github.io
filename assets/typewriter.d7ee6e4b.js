import{w as c}from"./writeEffect.a58c7202.js";import"./sleep.b2c92b69.js";import"./vendor.1543eabf.js";const o=(t,e)=>{new MutationObserver(s=>{s.forEach(r=>{const i=r.type==="attributes",a=r.target.classList.contains("typing");i&&a&&e()})}).observe(t,{attributes:!0,childList:!0,subtree:!0})},d=t=>t.forEach(e=>e.currentNode.textContent=""),g=async(t,e)=>{if(e.cascade)d(t);else{const{getLongestTextElement:n}=await import("./getLongestTextElement.023ff019.js"),s=n(t);o(s,()=>e.dispatch("done"))}for(const n of t)e.cascade?(await c(n,e),n.currentNode.classList.replace("typing","finished-typing")):c(n,e).then(()=>{n.currentNode.classList.replace("typing","finished-typing")});e.cascade&&e.dispatch("done")};export{g as mode};
